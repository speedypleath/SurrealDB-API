openapi: 3.1.0
x-stoplight:
  id: 6awmtczr0ytxc
info:
  version: 1.0.0
  title: Example.com
  termsOfService: 'https://example.com/terms/'
  contact:
    name: speedypleath
    email: contact@example.com
    url: 'http://example.com/contact'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  x-logo:
    url: 'https://redocly.github.io/openapi-template/logo.png'
  description: |
    This is an **example** API to demonstrate features of the OpenAPI specification.

    # Introduction

    This API definition is intended to to be a good starting point for
    describing your API in 

    [OpenAPI/Swagger
    format](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md).

    It also demonstrates features of the
    [create-openapi-repo](https://github.com/Redocly/create-openapi-repo) tool
    and 

    the [Redoc](https://github.com/Redocly/Redoc) documentation engine. Beyond
    the standard OpenAPI syntax, we use a few 

    [vendor
    extensions](https://github.com/Redocly/Redoc/blob/master/docs/redoc-vendor-extensions.md).


    # OpenAPI Specification

    The goal of The OpenAPI Specification is to define a standard,
    language-agnostic interface to REST APIs which

    allows both humans and computers to discover and understand the capabilities
    of the service without access to source

    code, documentation, or through network traffic inspection. When properly
    defined via OpenAPI, a consumer can 

    understand and interact with the remote service with a minimal amount of
    implementation logic. Similar to what

    interfaces have done for lower-level programming, OpenAPI removes the
    guesswork in calling the service.
tags:
  - name: User
    description: Operations about users.
  - name: Project
    description: Operations on projects.
servers:
  - url: 'https://{tenant}/api/v1'
    variables:
      tenant:
        default: www
        description: Your tenant id
  - url: 'https://localhost/api/v1'
paths:
  /users:
    get:
      tags:
        - User
      summary: List users
      description: List all users
      operationId: listUsers
      responses:
        '200':
          description: Succesful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - User
      summary: Add user
      description: Add a new user
      operationId: addUser
      requestBody:
        description: Add a new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Succesful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '405':
          description: Invalid user`
  '/users/{username}':
    get:
      tags:
        - User
      summary: Get user
      operationId: getUser
      parameters:
        - name: username
          in: path
          required: true
          description: Username of user to return
          schema:
            type: string
      responses:
        '200':
          description: Succesful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      description: Get user by username
    put:
      tags:
        - User
      summary: Update user
      description: Update user with username
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: The username of the user that needs to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          $ref: '#/components/responses/200'
    delete:
      tags:
        - User
      summary: Delete user
      description: Delete user with username
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The username of the user that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  '/users/{username}/projects':
    post:
      tags:
        - User
      summary: Add project to user
      description: Assign project to user
      operationId: addProjectToUser
      parameters:
        - name: username
          in: path
          required: true
          description: Username of user for which to assign project
          schema:
            type: string
      requestBody:
        description: Assign a new project to user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Succesful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '405':
          description: Invalid user
    get:
      tags:
        - User
      summary: Get list of projects for user
      operationId: getProjectsForUser
      parameters:
        - name: username
          in: path
          required: true
          description: Username of user to return
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/200'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      description: Get all projects of given user
    delete:
      tags:
        - User
      summary: Remove project from user
      description: Remove project from user
      operationId: deleteProjectFromUser
      parameters:
        - name: username
          in: path
          description: The username of the user for which to remove project
          required: true
          schema:
            type: string
      requestBody:
        description: Remove project from user
        content:
          application/json:
            schema:
              type: number
        required: true
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /projects:
    get:
      tags:
        - Project
      summary: List projects
      description: List all projects
      operationId: listProjets
      responses:
        '200':
          description: Succesful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
    post:
      tags:
        - Project
      summary: Add project
      description: Add a new project
      operationId: addProject
      requestBody:
        description: Add a new project
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
        required: true
      responses:
        '200':
          description: Succesful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '405':
          description: Invalid project
  '/projects/{projectId}':
    get:
      tags:
        - Project
      summary: Get project
      operationId: getProject
      parameters:
        - name: projectId
          in: path
          required: true
          description: Id of project to return
          schema:
            type: number
      responses:
        '200':
          description: Succesful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Invalid id supplied
        '404':
          description: Project not found
      description: Get project with id
    put:
      tags:
        - Project
      summary: Update project
      description: Update project with id
      operationId: updateProject
      parameters:
        - name: projectId
          in: path
          description: The id of the project that needs to be updated
          required: true
          schema:
            type: number
      requestBody:
        description: Update an existent project
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '200':
          $ref: '#/components/responses/200'
    delete:
      tags:
        - Project
      summary: Delete project
      description: Delete project with id
      operationId: deleteProject
      parameters:
        - name: projectId
          in: path
          description: The id of the project that needs to be deleted
          required: true
          schema:
            type: number
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          description: Invalid project id supplied
        '404':
          description: Project not found
  '/projects/{projectId}/users':
    get:
      tags:
        - Project
      summary: List users working on project
      operationId: getUsersForProject
      parameters:
        - name: projectId
          in: path
          required: true
          description: Id of project to return
          schema:
            type: number
      responses:
        '200':
          description: Succesful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Invalid id supplied
        '404':
          description: Project not found
      description: Get all users working on project
components:
  securitySchemes:
    main_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://example.com/api/oauth/dialog'
          scopes:
            'read:users': read users info
            'write:users': modify or remove users
    api_key:
      type: apiKey
      in: header
      name: api_key
    basic_auth:
      type: http
      scheme: basic
  schemas:
    Project:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: New project
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: j0hndoe
        email:
          type: string
          format: email
          example: johndoe@gmail.com
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'
  responses:
    '200':
      description: Operation succesful